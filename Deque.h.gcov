        -:    0:Source:Deque.h
        -:    0:Graph:TestDeque.gcno
        -:    0:Data:TestDeque.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:// ----------------------
        -:    2:// projects/deque/Deque.h
        -:    3:// Copyright (C) 2014
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------
        -:    6:
        -:    7:#ifndef Deque_h
        -:    8:#define Deque_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <algorithm> // copy, equal, lexicographical_compare, max, swap
        -:   15:#include <cassert>   // assert
        -:   16:#include <iterator>  // iterator, bidirectional_iterator_tag
        -:   17:#include <memory>    // allocator
        -:   18:#include <stdexcept> // out_of_range
        -:   19:#include <utility>   // !=, <=, >, >=
        -:   20:
        -:   21:// -----
        -:   22:// using
        -:   23:// -----
        -:   24:
        -:   25:using std::rel_ops::operator!=;
        -:   26:using std::rel_ops::operator<=;
        -:   27:using std::rel_ops::operator>;
        -:   28:using std::rel_ops::operator>=;
        -:   29:
        -:   30:// -------
        -:   31:// destroy
        -:   32:// -------
        -:   33:
        -:   34:template <typename A, typename BI>
function _Z7destroyISaIiEN8my_dequeIiS0_E8iteratorEET0_RT_S4_S4_ called 564 returned 100% blocks executed 100%
function _Z7destroyISaIdEN8my_dequeIdS0_E8iteratorEET0_RT_S4_S4_ called 564 returned 100% blocks executed 100%
     1128:   35:BI destroy (A& a, BI b, BI e) {
    13548:   36:    while (b != e) {
call    0 returned 100%
branch  1 taken 91%
branch  2 taken 9% (fallthrough)
call    3 returned 100%
branch  4 taken 91%
branch  5 taken 9% (fallthrough)
    11292:   37:        --e;
call    0 returned 100%
call    1 returned 100%
    11292:   38:        a.destroy(&*e);}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
     1128:   39:    return b;}
        -:   40:
        -:   41:// ------------------
        -:   42:// uninitialized_copy
        -:   43:// ------------------
        -:   44:
        -:   45:template <typename A, typename II, typename BI>
function _Z18uninitialized_copyISaIiEN8my_dequeIiS0_E14const_iteratorENS2_8iteratorEET1_RT_T0_S8_S5_ called 9 returned 100% blocks executed 59%
function _Z18uninitialized_copyISaIiEN8my_dequeIiS0_E8iteratorES3_ET1_RT_T0_S7_S4_ called 42 returned 100% blocks executed 59%
function _Z18uninitialized_copyISaIdEN8my_dequeIdS0_E14const_iteratorENS2_8iteratorEET1_RT_T0_S8_S5_ called 9 returned 100% blocks executed 59%
function _Z18uninitialized_copyISaIdEN8my_dequeIdS0_E8iteratorES3_ET1_RT_T0_S7_S4_ called 42 returned 100% blocks executed 59%
      102:   46:BI uninitialized_copy (A& a, II b, II e, BI x) {
      102:   47:    BI p = x;
        -:   48:    try {
     2124:   49:        while (b != e) {
call    0 returned 100%
branch  1 taken 73%
branch  2 taken 27% (fallthrough)
call    3 returned 100%
branch  4 taken 96%
branch  5 taken 4% (fallthrough)
call    6 returned 100%
branch  7 taken 73%
branch  8 taken 27% (fallthrough)
call    9 returned 100%
branch 10 taken 96%
branch 11 taken 4% (fallthrough)
     1920:   50:            a.construct(&*x, *b);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0% (throw)
call   26 returned 100%
call   27 returned 100%
     1920:   51:            ++b;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
     1920:   52:            ++x;}}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    =====:   53:    catch (...) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    =====:   54:        destroy(a, p, x);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    =====:   55:        throw;}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
      102:   56:    return x;}
        -:   57:
        -:   58:// ------------------
        -:   59:// uninitialized_fill
        -:   60:// ------------------
        -:   61:
        -:   62:template <typename A, typename BI, typename U>
function _Z18uninitialized_fillISaIiEN8my_dequeIiS0_E8iteratorEiET0_RT_S4_S4_RKT1_ called 609 returned 100% blocks executed 53%
function _Z18uninitialized_fillISaIdEN8my_dequeIdS0_E8iteratorEdET0_RT_S4_S4_RKT1_ called 609 returned 100% blocks executed 53%
     1218:   63:BI uninitialized_fill (A& a, BI b, BI e, const U& v) {
     1218:   64:    BI p = b;
        -:   65:    try {
    18888:   66:        while (b != e) {
call    0 returned 100%
branch  1 taken 93%
branch  2 taken 7% (fallthrough)
call    3 returned 100%
branch  4 taken 93%
branch  5 taken 7% (fallthrough)
    16452:   67:            a.construct(&*b, v);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
    16452:   68:            ++b;}}
call    0 returned 100%
call    1 returned 100%
    =====:   69:    catch (...) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    =====:   70:        destroy(a, p, b);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    =====:   71:        throw;}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
     1218:   72:    return e;}
        -:   73:
        -:   74:// -------
        -:   75:// my_deque
        -:   76:// -------
        -:   77:
        -:   78:template < typename T, typename A = std::allocator<T> >
        -:   79:class my_deque {
        -:   80:    public:
        -:   81:        // --------
        -:   82:        // typedefs
        -:   83:        // --------
        -:   84:
        -:   85:        typedef A                                        allocator_type;
        -:   86:        typedef typename allocator_type::value_type      value_type;
        -:   87:
        -:   88:        typedef typename allocator_type::size_type       size_type;
        -:   89:        typedef typename allocator_type::difference_type difference_type;
        -:   90:
        -:   91:        typedef typename allocator_type::pointer         pointer;
        -:   92:        typedef typename allocator_type::const_pointer   const_pointer;
        -:   93:
        -:   94:        typedef typename allocator_type::reference       reference;
        -:   95:        typedef typename allocator_type::const_reference const_reference;
        -:   96:
        -:   97:    public:
        -:   98:        // -----------
        -:   99:        // operator ==
        -:  100:        // -----------
        -:  101:
        -:  102:        /**
        -:  103:         * <your documentation>
        -:  104:         */
function _ZeqRK8my_dequeIiSaIiEES3_ called 9 returned 100% blocks executed 92%
function _ZeqRK8my_dequeIdSaIdEES3_ called 9 returned 100% blocks executed 92%
       18:  105:        friend bool operator == (const my_deque& lhs, const my_deque& rhs) {
       18:  106:            return (lhs.size() == rhs.size()) && std::equal(lhs.begin(), lhs.end(), rhs.begin());}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
        -:  107:
        -:  108:        // ----------
        -:  109:        // operator <
        -:  110:        // ----------
        -:  111:
        -:  112:        /**
        -:  113:         * <your documentation>
        -:  114:         */
function _ZltRK8my_dequeIiSaIiEES3_ called 9 returned 100% blocks executed 100%
function _ZltRK8my_dequeIdSaIdEES3_ called 9 returned 100% blocks executed 100%
       18:  115:        friend bool operator < (const my_deque& lhs, const my_deque& rhs) {
       18:  116:            return std::lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
        -:  117:
        -:  118:    private:
        -:  119:        // ----
        -:  120:        // data
        -:  121:        // ----
        -:  122:
        -:  123:        allocator_type _a;
        -:  124:        std::allocator<pointer> _pa;
        -:  125:
        -:  126:        pointer* _bl;
        -:  127:        pointer* _el;
        -:  128:
        -:  129:        pointer* _b;
        -:  130:        pointer _bi;
        -:  131:        size_type _size;
        -:  132:        size_type _outer_size;
        -:  133:
        -:  134:    private:
        -:  135:        // -----
        -:  136:        // valid
        -:  137:        // -----
        -:  138:
function _ZNK8my_dequeIiSaIiEE5validEv called 2532 returned 100% blocks executed 90%
function _ZNK8my_dequeIdSaIdEE5validEv called 2532 returned 100% blocks executed 90%
     5064:  139:        bool valid () const {
     5064:  140:            return (!_bl && !_el && !_b && !_bi) || ((_bl <= _b) && (_b <= _el));}
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 4% (fallthrough)
branch 13 taken 96%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
branch 22 taken 100% (fallthrough)
branch 23 taken 0%
        -:  141:
        -:  142:    public:
        -:  143:        // --------
        -:  144:        // iterator
        -:  145:        // --------
        -:  146:
        -:  147:        class iterator {
        -:  148:            public:
        -:  149:                // --------
        -:  150:                // typedefs
        -:  151:                // --------
        -:  152:
        -:  153:                typedef std::bidirectional_iterator_tag   iterator_category;
        -:  154:                typedef typename my_deque::value_type      value_type;
        -:  155:                typedef typename my_deque::difference_type difference_type;
        -:  156:                typedef typename my_deque::pointer         pointer;
        -:  157:                typedef typename my_deque::reference       reference;
        -:  158:
        -:  159:            public:
        -:  160:                // -----------
        -:  161:                // operator ==
        -:  162:                // -----------
        -:  163:
        -:  164:                /**
        -:  165:                 * <your documentation>
        -:  166:                 */
function _ZeqRKN8my_dequeIiSaIiEE8iteratorES4_ called 16227 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIdSaIdEE8iteratorES4_ called 16227 returned 100% blocks executed 100%
    32454:  167:                friend bool operator == (const iterator& lhs, const iterator& rhs) {
    32454:  168:                    return ((lhs._p == rhs._p) && (lhs._i == rhs._i));}
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
        -:  169:
        -:  170:                /**
        -:  171:                 * <your documentation>
        -:  172:                 */
function _ZneRKN8my_dequeIiSaIiEE8iteratorES4_ called 16188 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIdSaIdEE8iteratorES4_ called 16188 returned 100% blocks executed 100%
    32376:  173:                friend bool operator != (const iterator& lhs, const iterator& rhs) {
    32376:  174:                    return !(lhs == rhs);}
call    0 returned 100%
call    1 returned 100%
        -:  175:
        -:  176:                // ----------
        -:  177:                // operator +
        -:  178:                // ----------
        -:  179:
        -:  180:                /**
        -:  181:                 * <your documentation>
        -:  182:                 */
function _ZplN8my_dequeIiSaIiEE8iteratorEl called 300 returned 100% blocks executed 100%
function _ZplN8my_dequeIdSaIdEE8iteratorEl called 300 returned 100% blocks executed 100%
      600:  183:                friend iterator operator + (iterator lhs, difference_type rhs) {
      600:  184:                    return lhs += rhs;}
call    0 returned 100%
call    1 returned 100%
        -:  185:
        -:  186:                // ----------
        -:  187:                // operator -
        -:  188:                // ----------
        -:  189:
        -:  190:                /**
        -:  191:                 * <your documentation>
        -:  192:                 */
function _ZmiN8my_dequeIiSaIiEE8iteratorEl called 84 returned 100% blocks executed 100%
function _ZmiN8my_dequeIdSaIdEE8iteratorEl called 84 returned 100% blocks executed 100%
      168:  193:                friend iterator operator - (iterator lhs, difference_type rhs) {
      168:  194:                    return lhs -= rhs;}
call    0 returned 100%
call    1 returned 100%
        -:  195:
        -:  196:            private:
        -:  197:                // ----
        -:  198:                // data
        -:  199:                // ----
        -:  200:
        -:  201:                my_deque* _p;
        -:  202:                difference_type _i;
        -:  203:
        -:  204:            private:
        -:  205:                // -----
        -:  206:                // valid
        -:  207:                // -----
        -:  208:
function _ZNK8my_dequeIiSaIiEE8iterator5validEv called 19086 returned 100% blocks executed 83%
function _ZNK8my_dequeIdSaIdEE8iterator5validEv called 19086 returned 100% blocks executed 83%
    38172:  209:                bool valid () const {
    38172:  210:                    return (_p && (_i >= 0));}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        -:  211:
        -:  212:            public:
        -:  213:                // -----------
        -:  214:                // constructor
        -:  215:                // -----------
        -:  216:
        -:  217:                /**
        -:  218:                 * <your documentation>
        -:  219:                 */
function _ZN8my_dequeIiSaIiEE8iteratorC2EPS1_l called 2730 returned 100% blocks executed 75%
function _ZN8my_dequeIdSaIdEE8iteratorC2EPS1_l called 2730 returned 100% blocks executed 75%
     5460:  220:                iterator (my_deque* p, difference_type i) : _p(p), _i(i) {
     5460:  221:                    _p = p;
     5460:  222:                    _i = i;
     5460:  223:                    assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  224:
        -:  225:                // Default copy, destructor, and copy assignment.
        -:  226:                // iterator (const iterator&);
        -:  227:                // ~iterator ();
        -:  228:                // iterator& operator = (const iterator&);
        -:  229:
        -:  230:                // ----------
        -:  231:                // operator *
        -:  232:                // ----------
        -:  233:
        -:  234:                /**
        -:  235:                 * <your documentation>
        -:  236:                 */
function _ZNK8my_dequeIiSaIiEE8iteratordeEv called 16035 returned 100% blocks executed 100%
function _ZNK8my_dequeIdSaIdEE8iteratordeEv called 16035 returned 100% blocks executed 100%
    32070:  237:                reference operator * () const {
    32070:  238:                    return _p->operator[](_i);}
call    0 returned 100%
call    1 returned 100%
        -:  239:
        -:  240:                // -----------
        -:  241:                // operator ->
        -:  242:                // -----------
        -:  243:
        -:  244:                /**
        -:  245:                 * <your documentation>
        -:  246:                 */
        -:  247:                pointer operator -> () const {
        -:  248:                    return &**this;}
        -:  249:
        -:  250:                // -----------
        -:  251:                // operator ++
        -:  252:                // -----------
        -:  253:
        -:  254:                /**
        -:  255:                 * <your documentation>
        -:  256:                 */
function _ZN8my_dequeIiSaIiEE8iteratorppEv called 10236 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE8iteratorppEv called 10236 returned 100% blocks executed 80%
    20472:  257:                iterator& operator ++ () {
    20472:  258:                    ++_i;
    20472:  259:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
    20472:  260:                    return *this;}
        -:  261:
        -:  262:                /**
        -:  263:                 * <your documentation>
        -:  264:                 */
function _ZN8my_dequeIiSaIiEE8iteratorppEi called 9 returned 100% blocks executed 83%
function _ZN8my_dequeIdSaIdEE8iteratorppEi called 9 returned 100% blocks executed 83%
       18:  265:                iterator operator ++ (int) {
       18:  266:                    iterator x = *this;
       18:  267:                    ++(*this);
call    0 returned 100%
call    1 returned 100%
       18:  268:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       18:  269:                    return x;}
        -:  270:
        -:  271:                // -----------
        -:  272:                // operator --
        -:  273:                // -----------
        -:  274:
        -:  275:                /**
        -:  276:                 * <your documentation>
        -:  277:                 */
function _ZN8my_dequeIiSaIiEE8iteratormmEv called 5700 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE8iteratormmEv called 5700 returned 100% blocks executed 80%
    11400:  278:                iterator& operator -- () {
    11400:  279:                    --_i;
    11400:  280:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
    11400:  281:                    return *this;}
        -:  282:
        -:  283:                /**
        -:  284:                 * <your documentation>
        -:  285:                 */
function _ZN8my_dequeIiSaIiEE8iteratormmEi called 9 returned 100% blocks executed 71%
function _ZN8my_dequeIdSaIdEE8iteratormmEi called 9 returned 100% blocks executed 71%
       18:  286:                iterator operator -- (int) {
       18:  287:                    iterator x = *this;
       18:  288:                    --(*this);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
       18:  289:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       18:  290:                    return x;}
call    0 never executed
call    1 never executed
        -:  291:
        -:  292:                // -----------
        -:  293:                // operator +=
        -:  294:                // -----------
        -:  295:
        -:  296:                /**
        -:  297:                 * <your documentation>
        -:  298:                 */
function _ZN8my_dequeIiSaIiEE8iteratorpLEl called 309 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE8iteratorpLEl called 309 returned 100% blocks executed 80%
      618:  299:                iterator& operator += (difference_type d) {
      618:  300:                    _i = _i + d;
      618:  301:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
      618:  302:                    return *this;}
        -:  303:
        -:  304:                // -----------
        -:  305:                // operator -=
        -:  306:                // -----------
        -:  307:
        -:  308:                /**
        -:  309:                 * <your documentation>
        -:  310:                 */
function _ZN8my_dequeIiSaIiEE8iteratormIEl called 93 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE8iteratormIEl called 93 returned 100% blocks executed 80%
      186:  311:                iterator& operator -= (difference_type d) {
      186:  312:                    _i = _i - d;
      186:  313:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
      186:  314:                    return *this;}};
        -:  315:
        -:  316:    public:
        -:  317:        // --------------
        -:  318:        // const_iterator
        -:  319:        // --------------
        -:  320:
        -:  321:        class const_iterator {
        -:  322:            public:
        -:  323:                // --------
        -:  324:                // typedefs
        -:  325:                // --------
        -:  326:
        -:  327:                typedef std::bidirectional_iterator_tag   iterator_category;
        -:  328:                typedef typename my_deque::value_type      value_type;
        -:  329:                typedef typename my_deque::difference_type difference_type;
        -:  330:                typedef typename my_deque::const_pointer   pointer;
        -:  331:                typedef typename my_deque::const_reference reference;
        -:  332:
        -:  333:            public:
        -:  334:                // -----------
        -:  335:                // operator ==
        -:  336:                // -----------
        -:  337:
        -:  338:                /**
        -:  339:                 * <your documentation>
        -:  340:                 */
function _ZeqRKN8my_dequeIiSaIiEE14const_iteratorES4_ called 195 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIdSaIdEE14const_iteratorES4_ called 195 returned 100% blocks executed 100%
      390:  341:                friend bool operator == (const const_iterator& lhs, const const_iterator& rhs) {
      390:  342:                    return ((lhs._p == rhs._p) && (lhs._i == rhs._i));}
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 42% (fallthrough)
branch  3 taken 58%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
branch  6 taken 42% (fallthrough)
branch  7 taken 58%
        -:  343:
        -:  344:                /**
        -:  345:                 * <your documentation>
        -:  346:                 */
function _ZneRKN8my_dequeIiSaIiEE14const_iteratorES4_ called 153 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIdSaIdEE14const_iteratorES4_ called 153 returned 100% blocks executed 100%
      306:  347:                friend bool operator != (const const_iterator& lhs, const const_iterator& rhs) {
      306:  348:                    return !(lhs == rhs);}
call    0 returned 100%
call    1 returned 100%
        -:  349:
        -:  350:                // ----------
        -:  351:                // operator +
        -:  352:                // ----------
        -:  353:
        -:  354:                /**
        -:  355:                 * <your documentation>
        -:  356:                 */
function _ZplN8my_dequeIiSaIiEE14const_iteratorEl called 21 returned 100% blocks executed 100%
function _ZplN8my_dequeIdSaIdEE14const_iteratorEl called 21 returned 100% blocks executed 100%
       42:  357:                friend const_iterator operator + (const_iterator lhs, difference_type rhs) {
       42:  358:                    return lhs += rhs;}
call    0 returned 100%
call    1 returned 100%
        -:  359:
        -:  360:                // ----------
        -:  361:                // operator -
        -:  362:                // ----------
        -:  363:
        -:  364:                /**
        -:  365:                 * <your documentation>
        -:  366:                 */
function _ZmiN8my_dequeIiSaIiEE14const_iteratorEl called 12 returned 100% blocks executed 100%
function _ZmiN8my_dequeIdSaIdEE14const_iteratorEl called 12 returned 100% blocks executed 100%
       24:  367:                friend const_iterator operator - (const_iterator lhs, difference_type rhs) {
       24:  368:                    return lhs -= rhs;}
call    0 returned 100%
call    1 returned 100%
        -:  369:
        -:  370:            private:
        -:  371:                // ----
        -:  372:                // data
        -:  373:                // ----
        -:  374:
        -:  375:                const my_deque* _p;
        -:  376:                difference_type _i;
        -:  377:
        -:  378:            private:
        -:  379:                // -----
        -:  380:                // valid
        -:  381:                // -----
        -:  382:
function _ZNK8my_dequeIiSaIiEE14const_iterator5validEv called 468 returned 100% blocks executed 83%
function _ZNK8my_dequeIdSaIdEE14const_iterator5validEv called 468 returned 100% blocks executed 83%
      936:  383:                bool valid () const {
      936:  384:                    return (_p && (_i >= 0));}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        -:  385:
        -:  386:            public:
        -:  387:                // -----------
        -:  388:                // constructor
        -:  389:                // -----------
        -:  390:
        -:  391:                /**
        -:  392:                 * <your documentation>
        -:  393:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorC2EPKS1_l called 225 returned 100% blocks executed 75%
function _ZN8my_dequeIdSaIdEE14const_iteratorC2EPKS1_l called 225 returned 100% blocks executed 75%
      450:  394:                const_iterator (const my_deque* p, difference_type i) : _p(p), _i(i) {
      450:  395:                    _p = p;
      450:  396:                    _i = i;
      450:  397:                    assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  398:
        -:  399:                // Default copy, destructor, and copy assignment.
        -:  400:                // const_iterator (const const_iterator&);
        -:  401:                // ~const_iterator ();
        -:  402:                // const_iterator& operator = (const const_iterator&);
        -:  403:
        -:  404:                // ----------
        -:  405:                // operator *
        -:  406:                // ----------
        -:  407:
        -:  408:                /**
        -:  409:                 * <your documentation>
        -:  410:                 */
function _ZNK8my_dequeIiSaIiEE14const_iteratordeEv called 195 returned 100% blocks executed 100%
function _ZNK8my_dequeIdSaIdEE14const_iteratordeEv called 195 returned 100% blocks executed 100%
      390:  411:                reference operator * () const {
      390:  412:                    return _p->operator[](_i);}
call    0 returned 100%
call    1 returned 100%
        -:  413:
        -:  414:                // -----------
        -:  415:                // operator ->
        -:  416:                // -----------
        -:  417:
        -:  418:                /**
        -:  419:                 * <your documentation>
        -:  420:                 */
        -:  421:                pointer operator -> () const {
        -:  422:                    return &**this;}
        -:  423:
        -:  424:                // -----------
        -:  425:                // operator ++
        -:  426:                // -----------
        -:  427:
        -:  428:                /**
        -:  429:                 * <your documentation>
        -:  430:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorppEv called 156 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE14const_iteratorppEv called 156 returned 100% blocks executed 80%
      312:  431:                const_iterator& operator ++ () {
      312:  432:                    ++_i;
      312:  433:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
      312:  434:                    return *this;}
        -:  435:
        -:  436:                /**
        -:  437:                 * <your documentation>
        -:  438:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorppEi called 9 returned 100% blocks executed 83%
function _ZN8my_dequeIdSaIdEE14const_iteratorppEi called 9 returned 100% blocks executed 83%
       18:  439:                const_iterator operator ++ (int) {
       18:  440:                    const_iterator x = *this;
       18:  441:                    ++(*this);
call    0 returned 100%
call    1 returned 100%
       18:  442:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       18:  443:                    return x;}
        -:  444:
        -:  445:                // -----------
        -:  446:                // operator --
        -:  447:                // -----------
        -:  448:
        -:  449:                /**
        -:  450:                 * <your documentation>
        -:  451:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormmEv called 18 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE14const_iteratormmEv called 18 returned 100% blocks executed 80%
       36:  452:                const_iterator& operator -- () {
       36:  453:                    --_i;
       36:  454:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       36:  455:                    return *this;}
        -:  456:
        -:  457:                /**
        -:  458:                 * <your documentation>
        -:  459:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormmEi called 9 returned 100% blocks executed 71%
function _ZN8my_dequeIdSaIdEE14const_iteratormmEi called 9 returned 100% blocks executed 71%
       18:  460:                const_iterator operator -- (int) {
       18:  461:                    const_iterator x = *this;
       18:  462:                    --(*this);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
       18:  463:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       18:  464:                    return x;}
call    0 never executed
call    1 never executed
        -:  465:
        -:  466:                // -----------
        -:  467:                // operator +=
        -:  468:                // -----------
        -:  469:
        -:  470:                /**
        -:  471:                 * <your documentation>
        -:  472:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorpLEl called 30 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE14const_iteratorpLEl called 30 returned 100% blocks executed 80%
       60:  473:                const_iterator& operator += (difference_type d) {
       60:  474:                    _i = _i + d;
       60:  475:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       60:  476:                    return *this;}
        -:  477:
        -:  478:                // -----------
        -:  479:                // operator -=
        -:  480:                // -----------
        -:  481:
        -:  482:                /**
        -:  483:                 * <your documentation>
        -:  484:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormIEl called 21 returned 100% blocks executed 80%
function _ZN8my_dequeIdSaIdEE14const_iteratormIEl called 21 returned 100% blocks executed 80%
       42:  485:                const_iterator& operator -= (difference_type d) {
       42:  486:                    _i = _i - d;
       42:  487:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       42:  488:                    return *this;}};
        -:  489:
        -:  490:    public:
        -:  491:        // ------------
        -:  492:        // constructors
        -:  493:        // ------------
        -:  494:
        -:  495:        /**
        -:  496:         * <your documentation>
        -:  497:         */
function _ZN8my_dequeIiSaIiEEC2ERKS0_ called 27 returned 100% blocks executed 83%
function _ZN8my_dequeIdSaIdEEC2ERKS0_ called 27 returned 100% blocks executed 83%
       54:  498:        explicit my_deque (const allocator_type& a = allocator_type()) : _a(a) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       54:  499:            _bl = _el = _b = 0;
       54:  500:            _bi = 0;
       54:  501:            _size = _outer_size = 0;
       54:  502:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  503:
        -:  504:        /**
        -:  505:         * <your documentation>
        -:  506:         */
function _ZN8my_dequeIiSaIiEEC2EmRKiRKS0_ called 498 returned 100% blocks executed 78%
function _ZN8my_dequeIdSaIdEEC2EmRKdRKS0_ called 498 returned 100% blocks executed 78%
      996:  507:        explicit my_deque (size_type s, const_reference v = value_type(), const allocator_type& a = allocator_type()) : _a(a) {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 never executed
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 never executed
      996:  508:            _size = s; //_size - 1 is the laste index into the deque
        -:  509:
      996:  510:            if(_size == 0){
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
       48:  511:                _bl = _el = _b = 0;
       48:  512:                _bi = 0;
       48:  513:                _size = _outer_size = 0;
        -:  514:            }
        -:  515:            else {
      948:  516:                if((_size % 10) == 0){
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
      156:  517:                    _outer_size = _size / 10;
        -:  518:                }
        -:  519:                else{
      792:  520:                    _outer_size = (_size / 10) + 1;
        -:  521:                }
        -:  522:
      948:  523:                _bl = _b = _pa.allocate(_outer_size);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
      948:  524:                _el = _bl + _outer_size;
        -:  525:
      948:  526:                pointer* copy = _bl;
     4068:  527:                while(copy != _el){
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
branch  3 taken 30% (fallthrough)
     2172:  528:                    *copy = _a.allocate(10);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
     2172:  529:                    ++copy;
        -:  530:                }
        -:  531:
      948:  532:                _bi = *_bl;
        -:  533:
      948:  534:                uninitialized_fill(_a, begin(), end(), v);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
        -:  535:            }
      996:  536:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  537:
        -:  538:        /**
        -:  539:         * <your documentation>
        -:  540:         */
function _ZN8my_dequeIiSaIiEEC2ERKS1_ called 3 returned 100% blocks executed 72%
function _ZN8my_dequeIdSaIdEEC2ERKS1_ called 3 returned 100% blocks executed 72%
        6:  541:        my_deque (const my_deque& that) : _a(that._a) {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 never executed
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 never executed
        6:  542:            _size = that.size(); //_size - 1 is the laste index into the deque
call    0 returned 100%
call    1 returned 100%
        -:  543:
        6:  544:            if(_size == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  545:                _bl = _el = _b = 0;
    #####:  546:                _bi = 0;
    #####:  547:                _size = _outer_size = 0;
        -:  548:            }
        -:  549:            else{ 
        6:  550:                if((_size % 10) == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  551:                    _outer_size = _size / 10;
        -:  552:                }
        -:  553:                else{
        6:  554:                    _outer_size = (_size / 10) + 1;
        -:  555:                }
        -:  556:
        6:  557:                _bl = _b = _pa.allocate(_outer_size);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
        6:  558:                _el = _bl + _outer_size;
        -:  559:
        6:  560:                pointer* copy = _bl;
       18:  561:                while(copy != _el){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
        6:  562:                    *copy = _a.allocate(10);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
        6:  563:                    ++copy;
        -:  564:                }
        -:  565:
        6:  566:                _bi = *_bl;
        -:  567:
        6:  568:                uninitialized_copy(_a, that.begin(), that.end(), begin());
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
        -:  569:            }
        6:  570:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  571:
        -:  572:        // ----------
        -:  573:        // destructor
        -:  574:        // ----------
        -:  575:
        -:  576:        /**
        -:  577:         * <your documentation>
        -:  578:         */
function _ZN8my_dequeIiSaIiEED2Ev called 528 returned 100% blocks executed 71%
function _ZN8my_dequeIdSaIdEED2Ev called 528 returned 100% blocks executed 71%
     1056:  579:        ~my_deque () {
     1056:  580:            if(_bl){
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
      954:  581:                clear();
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
      954:  582:                pointer* copy = _bl;
     4086:  583:                while(copy != _el){
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
branch  3 taken 30% (fallthrough)
     2178:  584:                    _a.deallocate(*copy, 10);
call    0 returned 100%
call    1 returned 100%
     2178:  585:                    ++copy;
        -:  586:                }
      954:  587:                _pa.deallocate(_bl, _outer_size);
call    0 returned 100%
call    1 returned 100%
        -:  588:            }
     1056:  589:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 never executed
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
        -:  590:
        -:  591:        // ----------
        -:  592:        // operator =
        -:  593:        // ----------
        -:  594:
        -:  595:        /**
        -:  596:         * <your documentation>
        -:  597:         */
function _ZN8my_dequeIiSaIiEEaSERKS1_ called 12 returned 100% blocks executed 79%
function _ZN8my_dequeIdSaIdEEaSERKS1_ called 12 returned 100% blocks executed 79%
       24:  598:        my_deque& operator = (const my_deque& rhs) {
        -:  599:            size_type right_capacity;
        -:  600:
       24:  601:            if(!empty()){
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
call    3 returned 100%
branch  4 taken 75% (fallthrough)
branch  5 taken 25%
       18:  602:                right_capacity = ((_el - _b) * 10) - (_bi - *_b + 1);
        -:  603:
       18:  604:                if(this == &rhs){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  605:                    return *this;
        -:  606:                }
       18:  607:                if(size() == rhs.size()){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        6:  608:                    std::copy(rhs.begin(), rhs.end(), begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  609:                }
       12:  610:                else if(rhs.size() < size()){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        6:  611:                    std::copy(rhs.begin(), rhs.end(), begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        6:  612:                    resize(rhs.size());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
        -:  613:                }
        6:  614:                else if(rhs.size() <= right_capacity){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        6:  615:                    std::copy(rhs.begin(), rhs.begin() + size(), begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
        6:  616:                    uninitialized_copy(_a, rhs.begin() + size(), rhs.end(), end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
        6:  617:                    _size = rhs.size();
call    0 returned 100%
call    1 returned 100%
        -:  618:                }
        -:  619:                else{
    #####:  620:                    clear();
call    0 never executed
call    1 never executed
    #####:  621:                    resize(rhs.size());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:  622:                    uninitialized_copy(_a, rhs.begin(), rhs.end(), begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  623:                }
        -:  624:            }
        -:  625:            else{
        6:  626:                resize(rhs.size());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
        6:  627:                uninitialized_copy(_a, rhs.begin(), rhs.end(), begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  628:            }
       24:  629:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       24:  630:            return *this;}
        -:  631:
        -:  632:        // -----------
        -:  633:        // operator []
        -:  634:        // -----------
        -:  635:
        -:  636:        /**
        -:  637:         * <your documentation>
        -:  638:         */
function _ZN8my_dequeIiSaIiEEixEm called 16299 returned 100% blocks executed 100%
function _ZN8my_dequeIdSaIdEEixEm called 16299 returned 100% blocks executed 100%
    32598:  639:        reference operator [] (size_type index) {
    32598:  640:            size_type oi = index / 10;
    32598:  641:            size_type ii = index % 10;
        -:  642:
    32598:  643:            size_type offset = (_bi - *_b);
        -:  644:
    32598:  645:            if((offset + ii) > 9){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
      174:  646:                pointer* copy = _b + oi + 1;
      174:  647:                pointer pos = *copy + (offset + ii - 10);
      174:  648:                return *pos;
        -:  649:            }
        -:  650:            else{
    32424:  651:                pointer* copy = _b + oi;
    32424:  652:                pointer pos = *copy + offset + ii;
    32424:  653:                return *pos;
        -:  654:            }
        -:  655:        }
        -:  656:
        -:  657:        /**
        -:  658:         * <your documentation>
        -:  659:         */
function _ZNK8my_dequeIiSaIiEEixEm called 195 returned 100% blocks executed 100%
function _ZNK8my_dequeIdSaIdEEixEm called 195 returned 100% blocks executed 100%
      390:  660:        const_reference operator [] (size_type index) const {
      390:  661:            return const_cast<my_deque*>(this)->operator[](index);}
call    0 returned 100%
call    1 returned 100%
        -:  662:
        -:  663:        // --
        -:  664:        // at
        -:  665:        // --
        -:  666:
        -:  667:        /**
        -:  668:         * <your documentation>
        -:  669:         */
function _ZN8my_dequeIiSaIiEE2atEm called 12 returned 100% blocks executed 24%
function _ZN8my_dequeIdSaIdEE2atEm called 12 returned 100% blocks executed 24%
       24:  670:        reference at (size_type index) {
       24:  671:            if(index >= size()){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  672:                throw std::out_of_range("deque");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -:  673:            }
       24:  674:            return (this)->operator[](index);}
call    0 returned 100%
call    1 returned 100%
        -:  675:
        -:  676:        /**
        -:  677:         * <your documentation>
        -:  678:         */
        -:  679:        const_reference at (size_type index) const {
        -:  680:            return const_cast<my_deque*>(this)->at(index);}
        -:  681:
        -:  682:        // ----
        -:  683:        // back
        -:  684:        // ----
        -:  685:
        -:  686:        /**
        -:  687:         * <your documentation>
        -:  688:         */
function _ZN8my_dequeIiSaIiEE4backEv called 12 returned 100% blocks executed 78%
function _ZN8my_dequeIdSaIdEE4backEv called 12 returned 100% blocks executed 78%
       24:  689:        reference back () {
       24:  690:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       24:  691:            return *(end() - 1);}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        -:  692:
        -:  693:        /**
        -:  694:         * <your documentation>
        -:  695:         */
        -:  696:        const_reference back () const {
        -:  697:            return const_cast<my_deque*>(this)->back();}
        -:  698:
        -:  699:        // -----
        -:  700:        // begin
        -:  701:        // -----
        -:  702:
        -:  703:        /**
        -:  704:         * <your documentation>
        -:  705:         */
function _ZN8my_dequeIiSaIiEE5beginEv called 1470 returned 100% blocks executed 100%
function _ZN8my_dequeIdSaIdEE5beginEv called 1470 returned 100% blocks executed 100%
     2940:  706:        iterator begin () {
     2940:  707:            return iterator(this, 0);}
call    0 returned 100%
call    1 returned 100%
        -:  708:
        -:  709:        /**
        -:  710:         * <your documentation>
        -:  711:         */
function _ZNK8my_dequeIiSaIiEE5beginEv called 129 returned 100% blocks executed 100%
function _ZNK8my_dequeIdSaIdEE5beginEv called 129 returned 100% blocks executed 100%
      258:  712:        const_iterator begin () const {
      258:  713:            return const_iterator(this, 0);}
call    0 returned 100%
call    1 returned 100%
        -:  714:
        -:  715:        // -----
        -:  716:        // clear
        -:  717:        // -----
        -:  718:
        -:  719:        /**
        -:  720:         * <your documentation>
        -:  721:         */
function _ZN8my_dequeIiSaIiEE5clearEv called 489 returned 100% blocks executed 67%
function _ZN8my_dequeIdSaIdEE5clearEv called 489 returned 100% blocks executed 67%
      978:  722:        void clear () {
      978:  723:            resize(0);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
call    3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
      978:  724:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  725:
        -:  726:        // -----
        -:  727:        // empty
        -:  728:        // -----
        -:  729:
        -:  730:        /**
        -:  731:         * <your documentation>
        -:  732:         */
function _ZNK8my_dequeIiSaIiEE5emptyEv called 459 returned 100% blocks executed 100%
function _ZNK8my_dequeIdSaIdEE5emptyEv called 459 returned 100% blocks executed 100%
      918:  733:        bool empty () const {
      918:  734:            return !size();}
call    0 returned 100%
call    1 returned 100%
        -:  735:
        -:  736:        // ---
        -:  737:        // end
        -:  738:        // ---
        -:  739:
        -:  740:        /**
        -:  741:         * <your documentation>
        -:  742:         */
function _ZN8my_dequeIiSaIiEE3endEv called 1260 returned 100% blocks executed 100%
function _ZN8my_dequeIdSaIdEE3endEv called 1260 returned 100% blocks executed 100%
     2520:  743:        iterator end () {
     2520:  744:            return iterator(this, (this)->size());}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  745:
        -:  746:        /**
        -:  747:         * <your documentation>
        -:  748:         */
function _ZNK8my_dequeIiSaIiEE3endEv called 96 returned 100% blocks executed 100%
function _ZNK8my_dequeIdSaIdEE3endEv called 96 returned 100% blocks executed 100%
      192:  749:        const_iterator end () const {
      192:  750:            return const_iterator(this, (this)->size());}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  751:
        -:  752:        // -----
        -:  753:        // erase
        -:  754:        // -----
        -:  755:
        -:  756:        /**
        -:  757:         * <your documentation>
        -:  758:         */
function _ZN8my_dequeIiSaIiEE5eraseENS1_8iteratorE called 12 returned 100% blocks executed 83%
function _ZN8my_dequeIdSaIdEE5eraseENS1_8iteratorE called 12 returned 100% blocks executed 83%
       24:  759:        iterator erase (iterator i) {
       24:  760:            iterator e = end() - 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
       24:  761:            iterator copy = i;
       60:  762:            while(copy != e){
call    0 returned 100%
branch  1 taken 33%
branch  2 taken 67% (fallthrough)
call    3 returned 100%
branch  4 taken 33%
branch  5 taken 67% (fallthrough)
       12:  763:                *copy = *(copy + 1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
call   19 never executed
       12:  764:                ++copy;
call    0 returned 100%
call    1 returned 100%
        -:  765:            }
       24:  766:            destroy(_a, copy, copy + 1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
       24:  767:            --_size;
       24:  768:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       24:  769:            return i;}
        -:  770:
        -:  771:        // -----
        -:  772:        // front
        -:  773:        // -----
        -:  774:
        -:  775:        /**
        -:  776:         * <your documentation>
        -:  777:         */
function _ZN8my_dequeIiSaIiEE5frontEv called 12 returned 100% blocks executed 75%
function _ZN8my_dequeIdSaIdEE5frontEv called 12 returned 100% blocks executed 75%
       24:  778:        reference front () {
       24:  779:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       24:  780:            return *begin();}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
        -:  781:
        -:  782:        /**
        -:  783:         * <your documentation>
        -:  784:         */
        -:  785:        const_reference front () const {
        -:  786:            return const_cast<my_deque*>(this)->front();}
        -:  787:
        -:  788:        // ------
        -:  789:        // insert
        -:  790:        // ------
        -:  791:
        -:  792:        /**
        -:  793:         * <your documentation>
        -:  794:         */
function _ZN8my_dequeIiSaIiEE6insertENS1_8iteratorERKi called 12 returned 100% blocks executed 51%
function _ZN8my_dequeIdSaIdEE6insertENS1_8iteratorERKd called 12 returned 100% blocks executed 51%
       24:  795:        iterator insert (iterator i, const_reference v) {
       24:  796:            if(_outer_size == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  797:                resize(1);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  798:                *(begin()) = v;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:  799:                return begin();
call    0 never executed
call    1 never executed
        -:  800:            }
       24:  801:            else if(empty()){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  802:                *(begin()) = v;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:  803:                ++_size;
    #####:  804:                return begin();
call    0 never executed
call    1 never executed
        -:  805:            }
        -:  806:            else{
       24:  807:                size_type right_capacity = ((_el - _b) * 10) - (_bi - *_b + 1);
       24:  808:                if(size() == right_capacity){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  809:                    resize(size() + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  810:                }
       24:  811:                iterator e = end();
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
      108:  812:                while(i != e){
call    0 returned 100%
branch  1 taken 71%
branch  2 taken 29% (fallthrough)
call    3 returned 100%
branch  4 taken 71%
branch  5 taken 29% (fallthrough)
       60:  813:                    *e = *(e - 1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
call   19 never executed
       60:  814:                    --e;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
        -:  815:                }
       24:  816:                *i = v;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
       24:  817:                ++_size;
        -:  818:            }
       24:  819:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       24:  820:            return i;}
        -:  821:
        -:  822:        // ---
        -:  823:        // pop
        -:  824:        // ---
        -:  825:
        -:  826:        /**
        -:  827:         * <your documentation>
        -:  828:         */
function _ZN8my_dequeIiSaIiEE8pop_backEv called 48 returned 100% blocks executed 70%
function _ZN8my_dequeIdSaIdEE8pop_backEv called 48 returned 100% blocks executed 70%
       96:  829:        void pop_back () {
       96:  830:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       96:  831:            resize(size() - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
       96:  832:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  833:
        -:  834:        /**
        -:  835:         * <your documentation>
        -:  836:         */
function _ZN8my_dequeIiSaIiEE9pop_frontEv called 33 returned 100% blocks executed 86%
function _ZN8my_dequeIdSaIdEE9pop_frontEv called 33 returned 100% blocks executed 86%
       66:  837:        void pop_front () {
       66:  838:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
       66:  839:            destroy(_a, begin(), begin() + 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
       66:  840:            if((*_b + 9) == _bi){
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
        6:  841:                ++_b;
        6:  842:                _bi = *(_b);
        -:  843:            }
        -:  844:            else{
       60:  845:                ++_bi;
        -:  846:            }
       66:  847:            --_size;
       66:  848:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  849:
        -:  850:        // ----
        -:  851:        // push
        -:  852:        // ----
        -:  853:
        -:  854:        /**
        -:  855:         * <your documentation>
        -:  856:         */
function _ZN8my_dequeIiSaIiEE9push_backERKi called 102 returned 100% blocks executed 68%
function _ZN8my_dequeIdSaIdEE9push_backERKd called 102 returned 100% blocks executed 68%
      204:  857:        void push_back (const_reference v) {
      204:  858:            if(empty()){
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
call    3 returned 100%
branch  4 taken 18% (fallthrough)
branch  5 taken 82%
       36:  859:                my_deque x(1, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
       36:  860:                swap(x);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 never executed
call   15 never executed
        -:  861:            }
        -:  862:            else{
      168:  863:                resize(size() + 1, v);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  864:            }
      204:  865:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  866:
        -:  867:        /**
        -:  868:         * <your documentation>
        -:  869:         */
function _ZN8my_dequeIiSaIiEE10push_frontERKi called 51 returned 100% blocks executed 66%
function _ZN8my_dequeIdSaIdEE10push_frontERKd called 51 returned 100% blocks executed 66%
      102:  870:        void push_front (const_reference v) {
      102:  871:            if(empty()){
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
call    3 returned 100%
branch  4 taken 18% (fallthrough)
branch  5 taken 82%
       18:  872:                my_deque x(1, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
       18:  873:                swap(x);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 never executed
call   15 never executed
        -:  874:            }
        -:  875:            else{
       84:  876:                if((*_bl) == _bi){
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
       48:  877:                    size_type remember = _size;
       48:  878:                    my_deque x((_outer_size * 10) * 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
       48:  879:                    swap(x);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
       48:  880:                    uninitialized_copy(_a, x.begin(), x.end(), begin() + (x._outer_size * 10));
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0% (throw)
call   26 returned 100%
branch 27 taken 100% (fallthrough)
branch 28 taken 0% (throw)
call   29 returned 100%
        -:  881:
       48:  882:                    _b = _bl + (x._outer_size) - 1;
       48:  883:                    _bi = *_b + 9;
       48:  884:                    uninitialized_fill(_a, begin(), begin() + 1, v);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
       48:  885:                    _size = remember + 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
call    3 never executed
call    4 never executed
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
        -:  886:                }
       36:  887:                else if((*_b) == _bi){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  888:                    --_b;
    #####:  889:                    _bi = *_b + 9;
    #####:  890:                    uninitialized_fill(_a, begin(), begin() + 1, v);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  891:                    ++_size;
        -:  892:                }
        -:  893:                else{
       36:  894:                    --_bi;
       36:  895:                    uninitialized_fill(_a, begin(), begin() + 1, v);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
       36:  896:                    ++_size;
        -:  897:                }
        -:  898:            }
      102:  899:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  900:
        -:  901:        // ------
        -:  902:        // resize
        -:  903:        // ------
        -:  904:
        -:  905:        /**
        -:  906:         * <your documentation>
        -:  907:         */
function _ZN8my_dequeIiSaIiEE6resizeEmRKi called 657 returned 100% blocks executed 77%
function _ZN8my_dequeIdSaIdEE6resizeEmRKd called 657 returned 100% blocks executed 77%
     1314:  908:        void resize (size_type s, const_reference v = value_type()) {
        -:  909:            size_type right_capacity;
        -:  910:
     1314:  911:            if(s == size()){
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
     1362:  912:                return;
        -:  913:            }
     1266:  914:            else if(s == 0){
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
branch  2 taken 74% (fallthrough)
branch  3 taken 26%
      942:  915:                destroy(_a, begin(), end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
      942:  916:                _size = 0;
        -:  917:            }
      324:  918:            else if(empty()){
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
        6:  919:                my_deque x(s, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
        6:  920:                swap(x);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 never executed
call   15 never executed
        -:  921:            }
      318:  922:            else if(s < size()){
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
call    3 returned 100%
branch  4 taken 30% (fallthrough)
branch  5 taken 70%
       96:  923:                destroy(_a, begin() + s, end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
       96:  924:                _size = s;
        -:  925:            }
        -:  926:            else{
      222:  927:                right_capacity = ((_el - _b) * 10) - (_bi - *_b + 1);
      222:  928:                if(s < right_capacity){
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
      186:  929:                    uninitialized_fill(_a, end(), begin() + s, v);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
      186:  930:                    _size = s;
        -:  931:                }
        -:  932:                else{
       36:  933:                    if((s - (right_capacity)) < (_outer_size * 10)){
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
       30:  934:                        my_deque x((_outer_size * 10) * 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
       30:  935:                        swap(x);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
       30:  936:                        size_type new_bi = ((2 * (x._outer_size * 10)) - right_capacity);
       30:  937:                        uninitialized_copy(_a, x.begin(), x.end(), begin() + new_bi);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0% (throw)
call   26 returned 100%
branch 27 taken 100% (fallthrough)
branch 28 taken 0% (throw)
call   29 returned 100%
       30:  938:                        _size = x.size();
call    0 returned 100%
call    1 returned 100%
        -:  939:
       30:  940:                        _b = _bl + ((x._outer_size) + (x._b - x._bl));
       30:  941:                        _bi = *_b + (x._bi - *(x._b));
        -:  942:
       30:  943:                        resize(s , v);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 never executed
call   15 never executed
        -:  944:                    }
        -:  945:                    else{
        6:  946:                        size_type new_size = ((s / 10) + 1) * 10;
        -:  947:
        6:  948:                        my_deque x((_outer_size * 10) + (2 * new_size));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
        6:  949:                        swap(x);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
        6:  950:                        size_type new_bi = (new_size + (x._outer_size * 10) - right_capacity);
        6:  951:                        uninitialized_copy(_a, x.begin(), x.end(), begin() + new_bi);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0% (throw)
call   26 returned 100%
branch 27 taken 100% (fallthrough)
branch 28 taken 0% (throw)
call   29 returned 100%
        6:  952:                        _size = x.size();
call    0 returned 100%
call    1 returned 100%
        -:  953:
        6:  954:                        _b = _bl + ((new_size / 10) + (x._b - x._bl));
        6:  955:                        _bi = *_b + (x._bi - *(x._b));
        -:  956:
        6:  957:                        resize(s, v);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 never executed
call   15 never executed
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
     1266:  962:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  963:
        -:  964:        // ----
        -:  965:        // size
        -:  966:        // ----
        -:  967:
        -:  968:        /**
        -:  969:         * <your documentation>
        -:  970:         */
function _ZNK8my_dequeIiSaIiEE4sizeEv called 2991 returned 100% blocks executed 100%
function _ZNK8my_dequeIdSaIdEE4sizeEv called 2991 returned 100% blocks executed 100%
     5982:  971:        size_type size () const {
     5982:  972:            return _size;}
        -:  973:
        -:  974:        // ----
        -:  975:        // swap
        -:  976:        // ----
        -:  977:
        -:  978:        /**
        -:  979:         * <your documentation>
        -:  980:         */
function _ZN8my_dequeIiSaIiEE4swapERS1_ called 84 returned 100% blocks executed 55%
function _ZN8my_dequeIdSaIdEE4swapERS1_ called 84 returned 100% blocks executed 55%
      168:  981:        void swap (my_deque& that) {
      168:  982:            if(_a == that._a){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      168:  983:                std::swap(_b, that._b);
call    0 returned 100%
call    1 returned 100%
      168:  984:                std::swap(_bl, that._bl);
call    0 returned 100%
call    1 returned 100%
      168:  985:                std::swap(_el, that._el);
call    0 returned 100%
call    1 returned 100%
      168:  986:                std::swap(_bi, that._bi);
call    0 returned 100%
call    1 returned 100%
      168:  987:                std::swap(_size, that._size);
call    0 returned 100%
call    1 returned 100%
      168:  988:                std::swap(_outer_size, that._outer_size);
call    0 returned 100%
call    1 returned 100%
        -:  989:            }
        -:  990:            else{
    #####:  991:                my_deque x(*this);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  992:                *this = that;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  993:                that = x;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  994:            }
      168:  995:            assert(valid());}};
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  996:
        -:  997:#endif // Deque_h
